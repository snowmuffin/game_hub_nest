# Rate limiting zone definition (must be in http context)
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

server {
    listen 80;
    server_name ${DOMAIN} _;

    # IP로 직접 접근하는 경우 (개발/테스트용)
    location /api/ {
        proxy_pass http://127.0.0.1:4000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # CORS headers for development
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Cookie' always;
        
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Cookie';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # 헬스체크 엔드포인트
    location /health {
        proxy_pass http://127.0.0.1:4000/api/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # HTTPS로 리다이렉트 (SSL 인증서 설정 후 주석 해제)
    # if ($host = ${DOMAIN}) {
    #     return 301 https://$server_name$request_uri;
    # }
}

# HTTPS Server Block - Uncomment after SSL certificates are obtained
# server {
#     listen 443 ssl;
#     http2 on;
#     server_name ${DOMAIN};
# 
#     # SSL Configuration
#     ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
# 
#     # Security headers
#     add_header X-Frame-Options "SAMEORIGIN" always;
#     add_header X-XSS-Protection "1; mode=block" always;
#     add_header X-Content-Type-Options "nosniff" always;
#     add_header Referrer-Policy "no-referrer-when-downgrade" always;
#     add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
# 
#     # 로그 설정
#     access_log /var/log/nginx/game-hub-nest.access.log;
#     error_log /var/log/nginx/game-hub-nest.error.log;
# 
#     # API 프록시 설정
#     location /api/ {
#         # Rate limiting (DDoS 방지)
#         limit_req zone=api burst=20 nodelay;
#         
#         proxy_pass http://127.0.0.1:4000/api/;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_cache_bypass $http_upgrade;
#         
#         # 타임아웃 설정
#         proxy_connect_timeout 60s;
#         proxy_send_timeout 60s;
#         proxy_read_timeout 60s;
#     }
# 
#     # 헬스체크 엔드포인트
#     location /health {
#         proxy_pass http://127.0.0.1:4000/api/health;
#         proxy_http_version 1.1;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
# 
#     # Static files (필요시)
#     location / {
#         root /var/www/html;
#         try_files $uri $uri/ =404;
#     }
# 
#     # Gzip compression
#     gzip on;
#     gzip_vary on;
#     gzip_min_length 1024;
#     gzip_proxied expired no-cache no-store private auth;
#     gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/json application/javascript;
# }

# ==========================================
# SSL Certificate Setup Instructions
# ==========================================
# 
# 1. Install certbot:
#    For Amazon Linux/RHEL/CentOS: sudo dnf install certbot python3-certbot-nginx
#    For Ubuntu/Debian: sudo apt install certbot python3-certbot-nginx
# 
# 2. Set environment variables and generate final config:
#    export DOMAIN="your-api-domain.com"
#    envsubst '${DOMAIN}' < nginx.conf.example > /etc/nginx/conf.d/game-hub-nest.conf
# 
# 3. Obtain SSL certificate:
#    sudo certbot --nginx -d $DOMAIN
# 
# 4. After certificate is obtained, uncomment the HTTPS server block above
#    and uncomment the HTTPS redirect in the HTTP server block
# 
# 5. Test nginx configuration: sudo nginx -t
# 
# 6. Reload nginx: sudo systemctl reload nginx
# 
# 7. Test auto-renewal: sudo certbot renew --dry-run
